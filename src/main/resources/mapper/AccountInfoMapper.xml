<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xuyang.blog.dao.AccountInfoMapper" >
    <!-- Result Map-->
    <resultMap id="BaseResultMap" type="com.xuyang.blog.entity.AccountInfo">
        <result column="uuid" jdbcType="VARCHAR" property="uuid"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="nickName" jdbcType="VARCHAR" property="nickName"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="sex" jdbcType="CHAR" property="sex"/>
        <result column="mobile" jdbcType="VARCHAR" property="mobile"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="auth_range" property="authRange" jdbcType="VARCHAR"/>
        <result column="auth_name" property="authName" jdbcType="CHAR"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        <result column="is_del" property="isDel" jdbcType="CHAR"/>
        <result column="level"  jdbcType="CHAR" property="level"/>
        <result column="job" jdbcType="VARCHAR" property="job"/>
        <result column="introduction_of_author" property="introduction" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="VARCHAR"/>
        <result column="modify_time" property="modifyTime" jdbcType="VARCHAR"/>
    </resultMap>
    <select id="getAccountInfo" resultType="com.xuyang.blog.entity.AccountInfo">
        select username, nickName, name, sex, mobile, email, auth_name as authName, auth_range as authRange, avatar, is_del as isDel,
         level,job, introduction_of_author as introduction, create_time as creaateTime, modify_time as modifyTime from account_info where uuid=#{uuid}
    </select>
    <insert id="addUser" parameterType="com.xuyang.blog.entity.AccountInfo">
        insert into account_info(
            uuid, username, nickName,name,sex,mobile,email,auth_range, auth_name,avatar, is_del, level, job, introduction_of_author,create_time,modify_time
        )
        values (
            #{uuid},#{username},#{nickName}, #{name}, #{sex}, #{mobile}, #{email}, #{authRange}, #{authName}, #{avatar},#{isDel},#{level},#{job}, #{introduction}, now(), now()
        )
    </insert>
    <delete id="deleteByUuid">
        delete from account_info where uuid=#{uuid}
    </delete>
</mapper>